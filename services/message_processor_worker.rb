# services/message_processor_worker.rb

# –ü–æ–¥–∫–ª—é—á–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
require_relative 'censor'
require_relative 'mutator'
require_relative 'quality_control'

# –ü–æ–¥–∫–ª—é—á–∞–µ–º –ª–æ–≥–≥–µ—Ä
include AppLogger

class MessageProcessorWorker
  INTERVAL = 10 # —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏

  def initialize(message_ids: nil)
    @custom_message_ids = message_ids
  end

  def run
    loop do
      process_messages
      sleep INTERVAL
    end
  end

  private

  def process_messages
    log_info("üîç –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏...")

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ ID, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å
    ids_to_process = fetch_message_ids

    # –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö ID ‚Äî –≤—ã—Ö–æ–¥–∏–º
    if ids_to_process.empty?
      return log_info("‚ùå –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")
    end

    log_info("üì¨ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É #{ids_to_process.count} —Å–æ–æ–±—â–µ–Ω–∏–π")

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    ids_to_process.each do |id|
      #Thread.new do
        message = MessageItem.find_by(id: id)

        unless message
          log_info("[SKIPPED] –°–æ–æ–±—â–µ–Ω–∏–µ —Å ID=#{id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
          return
        end

        process_message(message)
        # end
    end
  end

  def fetch_message_ids
    if @custom_message_ids && !@custom_message_ids.empty?
      # –ë–µ—Ä—ë–º —Ç–æ–ª—å–∫–æ —Ç–µ ID, —É –∫–æ—Ç–æ—Ä—ã—Ö —Å—Ç–∞—Ç—É—Å 'new'
      MessageItem.where(id: @custom_message_ids).where(status: 'new').pluck(:id)
    else
      # –í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'new'
      MessageItem.where(status: 'new').pluck(:id)
    end
  end

  def process_message(message)
    log_info("[PROCESSING] –°–æ–æ–±—â–µ–Ω–∏–µ ID=#{message.id}, —Ç–µ–∫—Å—Ç: '#{message&.processed_text || ''}'")

      begin
        message.reload.start_processing!
        message.save!
        log_info("[STATUS] ID=#{message.id} ‚Üí processing")
        #sleep 2

        censor = Censor.new(message)
        if censor.run
          message.reload.pass_censor!
          message.save!
          log_info("[STATUS] ID=#{message.id} ‚Üí censored")
        else
          message.reload.fail_censor!
          message.save!
          log_info("[STATUS] ID=#{message.id} ‚Üí censored_failed")
          return
        end

        #sleep 2

        # üìå –ù–ê–ß–ò–ù–ê–ï–ú –ú–£–¢–ê–¶–ò–Æ
        message.reload.start_mutation!
        message.save!
        log_info("[STATUS] ID=#{message.id} ‚Üí in_mutation")
        #sleep 2

        mutator = Mutator.new(message)
        if mutator.run
          message.reload.succeed_mutation!
          message.save!
          log_info("[STATUS] ID=#{message.id} ‚Üí mutated")
        else
          message.reload.fail_mutation!
          message.save!
          log_info("[STATUS] ID=#{message.id} ‚Üí mutation_failed")
          return
        end

        qc = QualityControl.new(message)
        qc.approve

      rescue => e
        log_error(e, context: "[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è ID=#{message.id}")
        message.reload.mark_as_error!
        message.save!
        log_info("[STATUS] ID=#{message.id} ‚Üí error")
      end
    end
  end

