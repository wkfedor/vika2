# services/message_processor_service.rb
require_relative '../models/message_item'
require_relative '../models/message'
require_relative '../models/message_item_source'
include AppLogger

class MessageProcessorService
  INTERVAL = 1 # —Å–µ–∫—É–Ω–¥

  def run!
    loop do
      begin
        process_pending_messages
      rescue => e
        log_error(e, context: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π")
      end

      sleep INTERVAL
    end
  end

  private

  def process_pending_messages
    log_info("üîç –ü–æ–∏—Å–∫ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π...")

    pending_messages = Message.pending

    return log_info("‚ùå –°–æ–æ–±—â–µ–Ω–∏–π –Ω–µ—Ç.") if pending_messages.empty?

    grouped_messages = pending_messages.group_by(&:grouped_id)

    grouped_messages.each do |grouped_id, group|
      if grouped_id.nil?
        handle_individual_message(group.first)
      else
        handle_grouped_messages(grouped_id, group)
      end
    end
  end

  def handle_individual_message(message)
    log_info("üì¨ –û–¥–∏–Ω–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ID=#{message.message_id}, —Å–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å –≤ message_items...")

    source = find_or_create_message_source(message)

    item = MessageItem.create!(
      message_source_id: source.id,
      processed_text: message.text,
      status: "new",
      created_at: message.date,
      updated_at: Time.now,
      send_group_id: 5
    )

    MessageItemSource.create!(
      message_item_id: item.id,
      message_id: message.id,
      group_id: message.group_id
    )

    message.update_columns(sent_status: true, sent_at: Time.now)

    # –ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è message_item —Å–æ–±–∏—Ä–∞–µ–º –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã
    collect_media_files_for(item)

    log_info("‚úÖ –û–¥–∏–Ω–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ #{message.message_id} –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –≤ message_items")
  end

  def handle_grouped_messages(grouped_id, parts)
    first_part = parts.min_by(&:date)

    # –ï—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ç–∞—Ä—à–µ 10 —Å–µ–∫—É–Ω–¥ ‚Äî —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –≥—Ä—É–ø–ø–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
    if Time.now - first_part.date > 10
      log_info("üîÑ –ì—Ä—É–ø–ø–∞ #{grouped_id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞, —Å–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å –≤ message_items...")

      source = find_or_create_message_source(first_part)

      text = extract_text_from_group(parts)

      item = MessageItem.create!(
        grouped_id: grouped_id,
        message_source_id: source.id,
        processed_text: text,
        status: "new",
        created_at: first_part.date,
        updated_at: Time.now,
        send_group_id: 5   #todo —Å–¥–µ–ª–∞—Ç—å –ø—Ä–∏–≤—è–∑–∫—É –Ω–µ –ø–æ –∏–¥ –∞ –ø–æ –∫–ª—é—á—É, —Ç–∞–∫ –∂–µ –≤—ã–Ω–µ—Å—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      )

      parts.each do |msg|
        MessageItemSource.create!(
          message_item_id: item.id,
          message_id: msg.id,
          group_id: msg.group_id
        )
        msg.update_columns(sent_status: true, sent_at: Time.now)
      end

      # –ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è message_item —Å–æ–±–∏—Ä–∞–µ–º –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã
      collect_media_files_for(item)

      log_info("‚úÖ –ì—Ä—É–ø–ø–∞ #{grouped_id} —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –≤ message_items")

    else
      log_info("‚è≥ –ì—Ä—É–ø–ø–∞ #{grouped_id} –µ—â—ë –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –∂–¥—ë–º...")
    end
  end

  def extract_text_from_group(parts)
    # –ë–µ—Ä—ë–º —Ç–µ–∫—Å—Ç –∏–∑ –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, –≥–¥–µ –æ–Ω –µ—Å—Ç—å
    part_with_text = parts.find { |p| p.text.present? }
    part_with_text&.text || ""
  end

  def find_or_create_message_source(message)
    MessageSource.find_or_create_by!(
      source_type: "tggroup",
      external_id: message.group_id.to_s
    ) do |source|
      source.name = "Telegram Group ##{message.group_id}"
      source.link = "https://t.me/c/ #{message.group_id}/#{message.message_id}"
    end
  end

  # === –ú–µ—Ç–æ–¥ –¥–ª—è —Å–±–æ—Ä–∞ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ ===
  def collect_media_files_for(message_item)
    log_info("[MediaFiles] üì∑ –ó–∞–ø—É—Å–∫ –º–µ—Ç–æ–¥–∞ –¥–ª—è MessageItem ID: #{message_item.id}")

    if message_item.media_files.present?
      log_info("[MediaFiles] ‚ùå media_files —É–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
      return
    end

    sources = message_item.sources

    unless sources.any?
      log_info("[MediaFiles] ‚ùå –ù–µ—Ç —Å–≤—è–∑–∞–Ω–Ω—ã—Ö sources. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
      return
    end

    found_files = []
    checked_dirs = [] # –ú–∞—Å—Å–∏–≤ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—Å–µ—Ö –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π

    sources.each do |source|
      # puts "1*"*100
      # puts source.inspect


      group_id = source.message&.group_id
      message_id = source.message&.message_id

      # puts "2*"*100
      # puts source.message.inspect
      # puts message_id.inspect

      next unless group_id && message_id

      media_dir = "/home/feda/py/read-messages-from-group/media/group_#{group_id}/msg_#{message_id}"

      # puts "3*"*100
      # puts media_dir

      checked_dirs << media_dir # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –¥–ª—è –æ—Ç—á–µ—Ç–∞
      log_info("[MediaFiles] üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é: #{media_dir}")

      if Dir.exist?(media_dir)
        files = Dir.glob("#{media_dir}/*").select { |f| File.file?(f) }

        if files.any?
          relative_paths = files.map { |f| f.sub("/home/feda/py/read-messages-from-group", "") }
          log_info("[MediaFiles] ‚úÖ –ù–∞–π–¥–µ–Ω–æ #{files.size} —Ñ–∞–π–ª–∞(–æ–≤):")
          relative_paths.each { |p| log_info(" - #{p}") }

          found_files.concat(relative_paths)
        else
          log_info("[MediaFiles] üìÑ –§–∞–π–ª—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:")
          log_info(" - #{media_dir}")
        end
      else
        log_info("[MediaFiles] üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞:")
        log_info(" - #{media_dir}")
      end
    end

    if found_files.any?
      message_item.update!(media_files: found_files.uniq.to_json)
      log_info("[MediaFiles] ‚úÖ media_files —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
    else
      message_item.update!(media_files: [].to_json)
      if checked_dirs.any?
        log_info("[MediaFiles] üö´ –ù–∏ –≤ –æ–¥–Ω–æ–π –∏–∑ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤:")
        checked_dirs.each { |dir| log_info(" - #{dir}") }
      else
        log_info("[MediaFiles] üö´ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ (–æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç group_id –∏–ª–∏ message_id)")
      end
    end
  rescue => e
    log_error(e, context: "[MediaFiles] ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ –¥–ª—è MessageItem ID=#{message_item.id}")
    message_item.update!(media_files: [])
  end


end
