# services/message_processor_service.rb
require_relative '../models/message_item'
require_relative '../models/message'
require_relative '../models/message_item_source'
include AppLogger

class MessageProcessorService
  INTERVAL = 10 # —Å–µ–∫—É–Ω–¥

  def run!
    loop do
      begin
        process_pending_messages
      rescue => e
        log_error(e, context: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π")
      end

      sleep INTERVAL
    end
  end

  private

  def process_pending_messages
    log_info("üîç –ü–æ–∏—Å–∫ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π...")

    pending_messages = Message.pending

    return log_info("‚ùå –°–æ–æ–±—â–µ–Ω–∏–π –Ω–µ—Ç.") if pending_messages.empty?

    grouped_messages = pending_messages.group_by(&:grouped_id)

    grouped_messages.each do |grouped_id, group|
      if grouped_id.nil?
        handle_individual_message(group.first)
      else
        handle_grouped_messages(grouped_id, group)
      end
    end
  end

  def handle_individual_message(message)
    log_info("üì¨ –û–¥–∏–Ω–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ID=#{message.message_id}, —Å–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å –≤ message_items...")

    source = find_or_create_message_source(message)

    item = MessageItem.create!(
      message_source_id: source.id,
      processed_text: message.text,
      status: "ready_to_work",
      created_at: message.date,
      updated_at: Time.now
    )

    MessageItemSource.create!(
      message_item_id: item.id,
      message_id: message.message_id,
      group_id: message.group_id
    )

    message.update_columns(sent_status: true, sent_at: Time.now)
    log_info("‚úÖ –û–¥–∏–Ω–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ #{message.message_id} –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –≤ message_items")
  end

  def handle_grouped_messages(grouped_id, parts)
    first_part = parts.min_by(&:date)

    # –ï—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ç–∞—Ä—à–µ 10 —Å–µ–∫—É–Ω–¥ ‚Äî —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –≥—Ä—É–ø–ø–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
    if Time.now - first_part.date > 10
      log_info("üîÑ –ì—Ä—É–ø–ø–∞ #{grouped_id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞, —Å–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å –≤ message_items...")

      source = find_or_create_message_source(first_part)

      text = extract_text_from_group(parts)

      item = MessageItem.create!(
        grouped_id: grouped_id,
        message_source_id: source.id,
        processed_text: text,
        status: "ready_to_work",
        created_at: first_part.date,
        updated_at: Time.now
      )

      parts.each do |msg|
        MessageItemSource.create!(
          message_item_id: item.id,
          message_id: msg.message_id,
          group_id: msg.group_id
        )
        msg.update_columns(sent_status: true, sent_at: Time.now)
      end

      log_info("‚úÖ –ì—Ä—É–ø–ø–∞ #{grouped_id} —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –≤ message_items")

    else
      log_info("‚è≥ –ì—Ä—É–ø–ø–∞ #{grouped_id} –µ—â—ë –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –∂–¥—ë–º...")
    end
  end

  def extract_text_from_group(parts)
    # –ë–µ—Ä—ë–º —Ç–µ–∫—Å—Ç –∏–∑ –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, –≥–¥–µ –æ–Ω –µ—Å—Ç—å
    part_with_text = parts.find { |p| p.text.present? }
    part_with_text&.text || ""
  end

  def find_or_create_message_source(message)
    MessageSource.find_or_create_by!(
      source_type: "tggroup",
      external_id: message.group_id.to_s
    ) do |source|
      source.name = "Telegram Group ##{message.group_id}"
      source.link = "https://t.me/c/ #{message.group_id}/#{message.message_id}"
    end
  end
end
